xaxt="n", yaxt="n")
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(my_data)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
pp = prcomp(my_data)
pp
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
pp = prcomp(x)
pp
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(x)
pp
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
pp = prcomp(my_data)
pp
plot(pp$x[,1:4], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 2 cluster points
km = kmeans(my_data, centers = 2)
km
fitted(km, "classes")
pp = prcomp(my_data)
plot(pp$x[,1:4], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 3 cluster points
km2 = kmeans(my_data, centers = 3)
km2
fitted(km2, "classes")
pp = prcomp(my_data)
plot(pp$x[,1:2], col=fitted(km2, "classes") + 1,
xaxt="n", yaxt="n")
plot(pp$x[,1:4], col=fitted(km2, "classes") + 1,
xaxt="n", yaxt="n")
# complete linkage clustering
hh = hclust(dist(my_data), method="complete")
plot(hh, xlab=" ", sub="Complete link cluster analysis")
rect.hclust(hh, k=3)
plot(pp$x[,1:2], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# average linkage clustering
hh2 = hclust(dist(my_data), method="average")
plot(pp$x[,1:4], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# average linkage clustering
hh2 = hclust(dist(my_data), method="average")
plot(hh2, xlab=" ", sub="Complete link cluster analysis")
rect.hclust(hh2, k=3)
plot(pp$x[,1:2], col=cutree(hh2, k=3)+1,
xaxt="n", yaxt="n")
# single linkage clustering
hh3 = hclust(dist(my_data), method="single")
plot(hh3, xlab=" ", sub="Complete link cluster analysis")
rect.hclust(hh3, k=3)
plot(pp$x[,1:2], col=cutree(hh3, k=3)+1,
xaxt="n", yaxt="n")
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25, 1]= x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
km.out = kmeans(x, 2, nstart = 1:20)
km.out = kmeans(x, 2, nstart = c(1:20))
km.out = kmeans(x, 2, nstart = 20)
km.out
plot(km.out)
plot(pp$x[,1:2], col=fitted(km.out, "classes") + 1,
xaxt="n", yaxt="n")
# complete linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Complete link cluster analysis")
# When k = 2
km.out = kmeans(x, 2, nstart = 20)
km.out
km.out$withinss
# When k = 2
km.out = kmeans(x, 2, nstart = 1)
km.out
km.out$withinss
# When k = 2
km.out = kmeans(x, 2, nstart = 2)
km.out
km.out$withinss
# When k = 2
km.out = kmeans(x, 2, nstart = 1)
km.out$withinss
# When k = 2
km.out = kmeans(x, 2, nstart = 20)
km.out$withinss
# when k = 3
km.out2 = kmeans(x, 3, nstart = 20)
km.out2$withinss
km.out$totwithinss
km.out$tot.withinss
km.out2$tot.withinss
# complete linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Complete link cluster analysis")
pp = prcomp(x)
# Average linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Average link cluster analysis")
rect.hclust(hh, k=3)
plot(pp$x[,1:2], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(hh, xlab=" ", sub="Single link cluster analysis")
rect.hclust(hh, k=3)
plot(pp$x[,1:2], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25, 1]= x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
for(i in 1:20){
}
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out$withinss
# when k = 3
km.out2 = kmeans(x, 3, nstart = 20)
# When k = 2
x = rep(NA, 10000)
# When k = 2
x = rep(NA, 10000)
for(i in 1:10000){
km.out = kmeans(x, 2, nstart = 1)
x[i] = km.out$tot.withinss
}
km.out = kmeans(x, 2, nstart = 1)
km.out$tot.withinss
km.out = kmeans(x, 2, nstart = 1)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# When k = 2
a = rep(NA, 10000)
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25, 1]= x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
for(i in 1:10000){
km.out = kmeans(x, 2, nstart = 1)
a[i] = km.out$tot.withinss
}
km.out = kmeans(x, 2, nstart = 1)
# When k = 2
a = rep(NA, 10000)
for(i in 1:10000){
km.out = kmeans(x, 2, nstart = 1)
a[i] = km.out$tot.withinss
}
summary(a)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(x[1],x[2], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
pp$x[,1:2]
pp = prcomp(x)
pp$x[,1:2]
x
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
pp$x[,1:2]
x
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(hh, xlab=" ", sub="Single link cluster analysis")
# Single linkage
hh = hclust(dist(x), method="Single")
# Single linkage
hh = hclust(dist(x), method="single")
plot(hh, xlab=" ", sub="Single link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# Average linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Average link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# complete linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Complete link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(x)
plot(x, col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
heps <‐ as.data.frame(scale(heptathlon[,‐8], center = TRUE, scale = TRUE))
install.packages("FactomineR")
install.packages("FactoMineR")
library(FactoMineR)
heps <‐ as.data.frame(scale(heptathlon[,‐8], center = TRUE, scale = TRUE))
data("decathlon")
heps <- as.data.frame(scale(heptathlon[,-8], center = TRUE, scale = TRUE))
heps <- as.data.frame(scale(decathlon[,-8], center = TRUE, scale = TRUE))
decathlon[,-8]
decathlon
heptathlon
data('heptathlon')
dec <- decathlon[,1:10]
dec$'100m' <- max(dec$`100m`)-dec$`100m`
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`100m`)-dec$`100m`
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`400m`)-dec$`400m`
dec$`1500m` <- max(dec$`1500m`)-dec$`1500m`
dec$`110m.hurdle` <- max(dec$`110m.hurdle`)-dec$`110m.hurdle`
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
library(psych)
cortest.bartlett(decs)
KMO(decs)
decs[,1]
decs[,-8:-10]
round(cor(decs[,-8:-10]), 2)
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
round(cor(decs[,c(-4,-8:-10])), 2)
round(cor(decs[,c(-4,-8:-10)]), 2)
cortest.bartlett(decs[,c(-4,-8:-10)])
round(cor(decs, 2)
round(cor(decs, 2))
round(cor(decs, 2))
round(cor(decs), 2)
cortest.bartlett(decs)
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
cortest.bartlett(decs)
head(decs)
round(cor(decs), 2)
dec <- decathlon[,1:10]
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`400m`)-dec$`400m`
dec$`1500m` <- max(dec$`1500m`)-dec$`1500m`
dec$`110m.hurdle` <- max(dec$`110m.hurdle`)-dec$`110m.hurdle`
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
head(decs$)
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
accident  <-   c(5, 6, 8, 3, 6, 1, 2, 4, 7, 5, 6,
1, 2, 9, 6, 5, 6, 5, 1, 6, 6, 9,
4, 4, 9, 2, 3, 0, 3, 1, 9, 2, 5,
1, 4, 8, 9, 8, 6, 2, 0, 4, 5, 5 )
method <- gl(2,22,labels = c("Method A", "Method B"))
# exact for no warnings
wilcox.test(accident~method, paired = TRUE, exact = FALSE)
wilcox.test(accident, mu = 0, alternative = "greater")
mean(accident)
median(accident)
wilcox.test(accident, mu = 5)
wilcox.test(accident, mu = 5, exact = TRUE)
wilcox.test(accident, mu = 5, exact = FALSE)
10
10 + 20
install.packages("swirl")
library(swirl)
swirl()
ls
ls()
setwd()
setwd("C:/Users/chris/Dropbox/UWS/2020 Sem 1/Analytics Programming/Prac/1")
setwd("C:/Users/chris/Dropbox/UWS/2020 Sem 1/Analytics Programming/Prac/1")
1+1
sqrt(2)
print('Hello, World!')
x <- 1
y <- 2
z <- x+y
x <- 1
y <- 2
z <- x+y
ls()
rm(x)
ls()
help(ls)
help.start()
help(ls)
ls
ls <- 1
ls
ls()
getwd()
save.image(file="test.RData")
history()
rm(list=lm())
rm(list=ls())
load(file='test.RData')
ls()
rm(list=ls())
ls()
load(file='test.RData')
ls()
i <- 41
rm(list=ls()) # removes entire list of objects from the current environment
load(file='test.RData')
x <- seq(0,200,5)
print(paste('x is a vector of length',length(x)))
x
plot(1:length(x),x,main="Plot of vector x", xlab='Index', ylab='Values of elements in x',col=1)
# plot the values in x.
print(paste('The 10th element in x is',x[10]))
# printing out the 10th position in x
cat('The first 5 elements in x are',x[1:5])
cat('The 5th, 7th, and 10th elements in x are',x[c(5,7,10)])
?cat
x1 <- x[1:4]
x2 <- x[(length(x)-3):length(x)]
x1
x1[-1]
x1[-2]
x2
x1 + x2
-x1
x1 * x2
any(x1>5)
any(x1>5)
which(x1>5)
x1[which(x1>5)]
x1[which(x1>5)]
x1[1] <- NA
x1
which(is.na(x1))
x1[-which(is.na(x1))]
all(x2<200)
?all(x2<200)
x1 <- x1[-1]
x1
x1-5
x1*-1
sum(x1)
rep(1,length(x2))
runif(10)
randValues <- runif(10)
cat("My vector is: ", randValues)
print("Sum of samples: ", sum(randValues))
print(paste("Sum of samples: ", sum(randValues)))
### Task
?runif
print(paste("Mean of samples: ", mean(randValues)))
print(paste("Mean of samples no less than 0.5: ", mean(randValues(which(randValues >= 0.5)))))
print(paste("Mean of samples no less than 0.5: ", mean(randValues[which(randValues>=0.5)])))
print(paste("Mean of samples less than 0.5: ", mean(randValues[which(randValues<0.5)])))
plot(1:length(randValues),randValues,main="Plot of vector randValues", xlab='Index',
ylab='Values of elements in randValues',col=1)
abline(randValues)
abline(lm(randValues))
lm(randValues)
abline(mean(randValues))
abline(mean(randValues,))
abline(mean(randValues),)
?abline(mean(randValues),)
?abline(mean(randValues),1)
abline(mean(randValues),1)
abline(mean(randValues),0)
plot(1:length(randValues),randValues,main="Plot of vector randValues", xlab='Index',
ylab='Values of elements in randValues',col=2)
abline(mean(randValues),0)
library(swirl)
start()
swirl
swirl()
