plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
pp = prcomp(x)
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# When k = 2
a = rep(NA, 10000)
set.seed(2)
x = matrix(rnorm(50*2), ncol = 2)
x[1:25, 1]= x[1:25, 1] + 3
x[1:25, 2] = x[1:25, 2] - 4
for(i in 1:10000){
km.out = kmeans(x, 2, nstart = 1)
a[i] = km.out$tot.withinss
}
km.out = kmeans(x, 2, nstart = 1)
# When k = 2
a = rep(NA, 10000)
for(i in 1:10000){
km.out = kmeans(x, 2, nstart = 1)
a[i] = km.out$tot.withinss
}
summary(a)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(x[1],x[2], col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
pp$x[,1:2]
pp = prcomp(x)
pp$x[,1:2]
x
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
pp$x[,1:2]
x
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(hh, xlab=" ", sub="Single link cluster analysis")
# Single linkage
hh = hclust(dist(x), method="Single")
# Single linkage
hh = hclust(dist(x), method="single")
plot(hh, xlab=" ", sub="Single link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# Average linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Average link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# complete linkage
hh = hclust(dist(x), method="complete")
plot(hh, xlab=" ", sub="Complete link cluster analysis")
rect.hclust(hh, k=3)
plot(x, col=cutree(hh, k=3)+1,
xaxt="n", yaxt="n")
# 3 groups
km = kmeans(x, centers = 3)
km
fitted(km, "classes")
pp = prcomp(x)
plot(x, col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
# 2 groups
km = kmeans(x, centers = 2)
km
fitted(km, "classes")
plot(pp$x[,1:2], col=fitted(km, "classes") + 1,
xaxt="n", yaxt="n")
heps <‐ as.data.frame(scale(heptathlon[,‐8], center = TRUE, scale = TRUE))
install.packages("FactomineR")
install.packages("FactoMineR")
library(FactoMineR)
heps <‐ as.data.frame(scale(heptathlon[,‐8], center = TRUE, scale = TRUE))
data("decathlon")
heps <- as.data.frame(scale(heptathlon[,-8], center = TRUE, scale = TRUE))
heps <- as.data.frame(scale(decathlon[,-8], center = TRUE, scale = TRUE))
decathlon[,-8]
decathlon
heptathlon
data('heptathlon')
dec <- decathlon[,1:10]
dec$'100m' <- max(dec$`100m`)-dec$`100m`
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`100m`)-dec$`100m`
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`400m`)-dec$`400m`
dec$`1500m` <- max(dec$`1500m`)-dec$`1500m`
dec$`110m.hurdle` <- max(dec$`110m.hurdle`)-dec$`110m.hurdle`
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
library(psych)
cortest.bartlett(decs)
KMO(decs)
decs[,1]
decs[,-8:-10]
round(cor(decs[,-8:-10]), 2)
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
round(cor(decs[,c(-4,-8:-10])), 2)
round(cor(decs[,c(-4,-8:-10)]), 2)
cortest.bartlett(decs[,c(-4,-8:-10)])
round(cor(decs, 2)
round(cor(decs, 2))
round(cor(decs, 2))
round(cor(decs), 2)
cortest.bartlett(decs)
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
cortest.bartlett(decs)
head(decs)
round(cor(decs), 2)
dec <- decathlon[,1:10]
dec$`100m` <- max(dec$`100m`)-dec$`100m`
dec$`400m` <- max(dec$`400m`)-dec$`400m`
dec$`1500m` <- max(dec$`1500m`)-dec$`1500m`
dec$`110m.hurdle` <- max(dec$`110m.hurdle`)-dec$`110m.hurdle`
decs <- as.data.frame(scale(dec, center = TRUE, scale = TRUE))
head(decs$)
round(cor(decs), 2)
cortest.bartlett(decs)
KMO(decs)
accident  <-   c(5, 6, 8, 3, 6, 1, 2, 4, 7, 5, 6,
1, 2, 9, 6, 5, 6, 5, 1, 6, 6, 9,
4, 4, 9, 2, 3, 0, 3, 1, 9, 2, 5,
1, 4, 8, 9, 8, 6, 2, 0, 4, 5, 5 )
method <- gl(2,22,labels = c("Method A", "Method B"))
# exact for no warnings
wilcox.test(accident~method, paired = TRUE, exact = FALSE)
wilcox.test(accident, mu = 0, alternative = "greater")
mean(accident)
median(accident)
wilcox.test(accident, mu = 5)
wilcox.test(accident, mu = 5, exact = TRUE)
wilcox.test(accident, mu = 5, exact = FALSE)
10
10 + 20
install.packages("swirl")
library(swirl)
swirl()
ls
ls()
setwd("C:/Users/chris/Dropbox/UWS/2020 Sem 1/AnalyticsProgramming/Prac2")
?rnorm()
n <- rnorm(20)
n
n
pos = lenth(which(n>0))
pos = length(which(n>0))
pos
neg = length(which(n<0))
neg
cat('There are ', pos, ' positive numbers')
cat('There are', pos, 'positive numbers')
cat('There are', pos, 'positive numbers and', neg, 'negative values in the vector')
cat('There are', pos, 'positive numbers and', neg, 'negative values in the vector\n')
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\n Here\'s the vector
after flipping the negative values;\n')
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\n Here\'s the vector after flipping the negative values;\n')
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\nHere\'s the vector after flipping the negative values;\n')
abs(n)
?abs
flipn = abs(n)
flipn
absn = abs(n)
absn
absn = abs(n) # absolute values to flip negative signs to positive
absn
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\nHere\'s the vector after flipping the negative values:\n',
)
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\nHere\'s the vector after flipping the negative values:\n',
absn)
cat('There are', pos, 'positive numbers and', neg,
'negative values in the vector\nHere\'s the vector after flipping the negative values:\n')
print(absn)
?cut
cut(absn, c(0.03595731, 0.77318043, 1.51040356, 2.24762668))
bins <- cut(absn, c(0.03595731, 0.77318043, 1.51040356, 2.24762668))
bin
bins
bins <- cut(absn, c(0.03595731, 0.77318043, 1.51040356, 2.24762668),
labels = c('Bin 1', 'Bin 2', 'Bin 3'))
bins
table(bins)
bins <- cut(absn, c(0.03595731, 0.77318043, 1.51040356, 2.24762668),
labels = c('bin 1', 'bin 2', 'bin 3'))
table(bins)
matrix()
matrix(absn)
?matrix(absn)
matrix(absn, 3, 6)
matrix(absn, 3, 6, byrow = TRUE)
?t()
?t(absn)
t(absn)
matrix(t(absn, 3, 6))
matrix(t(absn), 3, 6)
matrix(absn, 3, 6) # fill a 3*6 matrix with the data, extra values are discarded
matrix(t(absn), 3, 6)
matrix(absn, 3, 6, byrow = TRUE) # fill a 3*6 matrix with the data, extra values are discarded
cars
head(cars)
head(cars) # the cars dataset
attach(cars)
lm(speed ~ dist)
?lm(speed ~ dist)
plot(speed, dist)
plot(speed, dist, legend())
plot(speed, dist)
abline(lm(speed ~ dist))
abline(lm(dist ~ speed))
abline(lm(dist ~ speed), col = 2)
legend(cars)
?legend
library(ggplot2)
ggplot(speed, dist, legend(cars))
ggplot(speed, dist)
aes(speed, dist)
f + geom_jitter()
f <- ggplot(mpg, aes(cty, hwy))
f + geom_jitter()
f <- ggplot(mpg, aes(speed, dist))
f + geom_jitter()
f <- ggplot(cars, aes(speed, dist))
f + geom_jitter()
f + geom_jitter() + ggtitle("Stopping distance vs travel speed")
f + geom_jitter() + labs("Stopping distance vs travel speed", 'Stopping distance', 'Travel speed') +
detach(cars)
f + geom_jitter() + labs("Stopping distance vs travel speed", 'Stopping distance', 'Travel speed')
f + geom_jitter() + labs("Stopping distance vs travel speed", "Stopping distance", "Travel speed")
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Stopping distance",
y = "Travel speed")
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance")
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_quantile(lm(dist ~ speed))
attach(cars) # attach dataset, no need to keep refering the dataset.
f <- ggplot(cars, aes(speed, dist))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_quantile(lm(dist ~ speed))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance")
f + geom_quantile()
speed
f <- ggplot(cars, aes(speed ~ dist))
f + geom_quantile()
f <- ggplot(cars, aes(speed, dist))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance")
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") geom_abline(dist ~ speed)
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(dist ~ speed)
f <- ggplot(cars, aes(speed, dist))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(dist ~ speed)
f <- ggplot(cars, aes(speed, dist, dist ~ speed))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline()
f <- ggplot(cars, aes(speed, dist, speed~dist))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline()
f <- ggplot(cars, aes(speed, dist))
f + geom_jitter() + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline()
f <- ggplot(cars, aes(speed, dist)) + geom_point()
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline()
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(lm(dist, speed))
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(lm(dist~ speed))
lm(dist~speed)
s <- speed(lm(dist~speed))
lm(dist~speed)
lm(dist~speed)$speed
s <- lm(dist~speed)
s$coefficients
s$coefficients[1]
s$coefficients[1,1]
s$coefficients[1]
s$coefficients[2]
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1])
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(slope = s$coefficients[2],
intercept = s$coefficients[1],
col(red))
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(slope = s$coefficients[2],
intercept = s$coefficients[1],
col(2))
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(slope = s$coefficients[2],
intercept = s$coefficients[1],
col('red'))
f + labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") + geom_abline(slope = s$coefficients[2],
intercept = s$coefficients[1],
color = 'red')
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red') +
theme(legend.position = 'top')
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red')
s <- lm(dist~speed) # getting the linear model for abline
plot(speed, dist, label = "Stopping distance vs travel speed")
plot(speed, dist, title = "Stopping distance vs travel speed")
?plot(speed, dist, title = "Stopping distance vs travel speed")
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed))
abline(lm(dist~speed), col = 2)
?legend()
?legend(1,1)
legend(1,1)
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2)
legend(1,1)
?legend(1,1, legend = )
legend(1,1, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(1,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(5,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
legend(5,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(2,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(3,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
legend(3,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(4,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
legend(4,90, legend = c('Observations', 'Model'), col = c('black', 'red'))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2)
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'))
?legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), )
?legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(1, 2))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(1, 2))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(1, 1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(5, 1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(6, 1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(, 1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, 0))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2)
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = 1)
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = (1, NA))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2)
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
detach(cars)
attach(cars) # attach dataset, no need to keep refering the dataset.
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red') +
theme(legend.position = c(4, 120))
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red') +
theme(legend.position = c(4, 120), legend.text = c('Observations', 'Model'))
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red') +
theme(legend.position = c(4, 120))
f +
labs(title ="Stopping distance vs travel speed", x = "Travel speed",
y = "Stopping distance") +
geom_abline(slope = s$coefficients[2], intercept = s$coefficients[1],
color = 'red')
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
detach(cars)
legend(2,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend(3,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
attach(cars) # attach dataset, no need to keep refering the dataset.
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend(4,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend(3,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend(3.5,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend(3.5,120, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend(3.5,125, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend(3.5,123, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
legend(3.5,123, legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend('center','groups', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend('top','groups', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend('top','left', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('top','left', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'), lty = c(0, 1), pch = c(1, NA))
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), bty = 'n')
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), lwd = 2)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), lwd = 2)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA))
abline(lm(dist~speed), col = 2) # add linear line
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), cex = 1.2)
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), cex = 1)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', 'groups', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA))
legend('topleft, legend = c('Observations', 'Model'), col = c('black', 'red'),
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), )
?legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), )
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), border = NA)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), border = NA)
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), border = 0)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), border = 0)
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), fill = NA)
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), )
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA) )
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA))
# normal plotting
plot(speed, dist, main = "Stopping distance vs travel speed", xlab = 'Travel speed', ylab = 'Stopping distance')
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA), bty = 'n')
abline(lm(dist~speed), col = 2) # add linear line
legend('topleft', legend = c('Observations', 'Model'), col = c('black', 'red'),
lty = c(0, 1), pch = c(1, NA))
detach(cars)
